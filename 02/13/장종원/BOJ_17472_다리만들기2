import java.io.*;
import java.util.*;

public class Main {
	
	static int[] dx = {0, 1, 0, -1};
	static int[] dy = {1, 0, -1, 0};
	
	static int M, N;
	static int[][] map;
	static PriorityQueue<Edge> edgeList = new PriorityQueue<>((e1, e2)-> e1.weight - e2.weight);
	static int landCnt;
	static int[] parents;
	
	public static class Edge{
		int from, to;
		int weight;
		
		public Edge(int from, int to, int weight) {
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		map = new int[N][M];
		
		for(int i = 0; i < N ; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < M ; j++) {
				int value = Integer.parseInt(st.nextToken());
				map[i][j] = value == 1 ? -1 : 0;
			}
		}
		
		// 섬 라벨링
		for(int i = 0; i < N ; i++) {
			for(int j = 0 ; j < M ; j++) {
				
				if(map[i][j] != -1) continue;
				
				landCnt++;
				landLabeling(i, j);
			}
		}
		
		
		// 섬 연결(간선)
		for(int i = 0; i < N ; i++) {
			for(int j = 0; j < M; j++) {
				
				if(map[i][j] > 0) makeBridge(i, j);
			}
		}
		
		// 비용 계산
		System.out.println(BridgeMSTCost());
	}
	
	// 섬 라벨링 메서드
	public static void landLabeling(int x , int y) {
		map[x][y] = landCnt;
		
		for(int dir = 0; dir < 4; dir++) {
			int nx = x + dx[dir];
			int ny = y + dy[dir];
			
			if(!ismapIn(nx, ny)) continue;
			if(map[nx][ny] != -1) continue;
			
			landLabeling(nx, ny);
		}
	}
	
	public static boolean ismapIn(int x, int y) {
		return x >= 0 && y >= 0 && x < N && y < M;
	}
	
	// 섬 연결(간선) 메서드
	public static void makeBridge(int cx , int cy) {
		for(int dir = 0; dir < 2; dir++) {
			
			int length = 0;
			int x = cx;
			int y = cy;
			
			while (true) {
				x += dx[dir];
				y += dy[dir];
				
				if(x >= N || y >= M ) break;
				if(map[x][y] == 0) length++;
				else {
					if (length < 2) break;
					if (map[cx][cy] == map[x][y]) break;
					
					edgeList.add(new Edge(map[cx][cy], map[x][y], length));
					break;
				}
			}
		}
	}
	
	public static int BridgeMSTCost() {
		makeSet();
		
		int cost = 0;
		int unionCnt = 0;
		
		while (!edgeList.isEmpty()) {
			Edge edge = edgeList.poll();
			
			if(union(edge.from, edge.to)) {
				
				cost += edge.weight;
				unionCnt++;
				
				if(unionCnt == landCnt - 1) return cost;
			}
		}
		return -1;
	}
	
	public static boolean union(int a, int b) {
		int rootA = find(a);
		int rootB = find(b);
		if (rootA == rootB) return false;
		
		parents[rootA] = rootB;
		return true;
	}
	
	public static int find(int a) {
		if (parents[a] == a) return a;
		return parents[a] = find(parents[a]);
	}
	
	public static void makeSet() {
		parents = new int[landCnt + 1];
		for(int i = 0 ; i <= landCnt ; i++) parents[i]= i;
	}
}
